/*
 * Airplane Hackathon API
 * Airplane Hackathon API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;


import com.google.gson.reflect.TypeToken;

import java.io.IOException;




import io.swagger.client.model.BoardAllGeneralDTO;
import io.swagger.client.model.BoardDetailsDTO;
import io.swagger.client.model.BoardNewResponseDTO;
import io.swagger.client.model.BoardScoresDTO;
import java.util.UUID;


import java.lang.reflect.Type;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



public class BoardControllerApi {
    private ApiClient apiClient;

    public BoardControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoardControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    
    /**
     * Build call for getAllBoards
     * @param airplaneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call getAllBoardsCall(UUID airplaneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllBoardsValidateBeforeCall(UUID airplaneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling getAllBoards(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllBoardsCall(airplaneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Get general info about all boards.
     * 
     * @param airplaneId  (required)
     * @return BoardAllGeneralDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public BoardAllGeneralDTO getAllBoards(UUID airplaneId) throws ApiException {
        ApiResponse<BoardAllGeneralDTO> resp = getAllBoardsWithHttpInfo(airplaneId);
        return resp.getData();
    }

    /**
     * Get general info about all boards.
     * 
     * @param airplaneId  (required)
     * @return ApiResponse&lt;BoardAllGeneralDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<BoardAllGeneralDTO> getAllBoardsWithHttpInfo(UUID airplaneId) throws ApiException {
        com.squareup.okhttp.Call call = getAllBoardsValidateBeforeCall(airplaneId, null, null);
        Type localVarReturnType = new TypeToken<BoardAllGeneralDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get general info about all boards. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call getAllBoardsAsync(UUID airplaneId, final ApiCallback<BoardAllGeneralDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllBoardsValidateBeforeCall(airplaneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoardAllGeneralDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /**
     * Build call for getDetails
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call getDetailsCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/{boardId}"
            .replaceAll("\\{" + "boardId" + "\\}", apiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDetailsValidateBeforeCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling getDetails(Async)");
        }
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getDetails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDetailsCall(airplaneId, boardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Get detailed info about the board.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @return BoardDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public BoardDetailsDTO getDetails(UUID airplaneId, UUID boardId) throws ApiException {
        ApiResponse<BoardDetailsDTO> resp = getDetailsWithHttpInfo(airplaneId, boardId);
        return resp.getData();
    }

    /**
     * Get detailed info about the board.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @return ApiResponse&lt;BoardDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<BoardDetailsDTO> getDetailsWithHttpInfo(UUID airplaneId, UUID boardId) throws ApiException {
        com.squareup.okhttp.Call call = getDetailsValidateBeforeCall(airplaneId, boardId, null, null);
        Type localVarReturnType = new TypeToken<BoardDetailsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get detailed info about the board. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call getDetailsAsync(UUID airplaneId, UUID boardId, final ApiCallback<BoardDetailsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDetailsValidateBeforeCall(airplaneId, boardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoardDetailsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /**
     * Build call for getNew
     * @param airplaneId  (required)
     * @param passengersAmount  (optional)
     * @param width  (optional)
     * @param height  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call getNewCall(UUID airplaneId, Integer passengersAmount, Integer width, Integer height, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passengersAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passengersAmount", passengersAmount));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNewValidateBeforeCall(UUID airplaneId, Integer passengersAmount, Integer width, Integer height, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling getNew(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getNewCall(airplaneId, passengersAmount, width, height, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Create a new board, default size is 27x16 with 20 passengers.
     * 
     * @param airplaneId  (required)
     * @param passengersAmount  (optional)
     * @param width  (optional)
     * @param height  (optional)
     * @return BoardNewResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public BoardNewResponseDTO getNew(UUID airplaneId, Integer passengersAmount, Integer width, Integer height) throws ApiException {
        ApiResponse<BoardNewResponseDTO> resp = getNewWithHttpInfo(airplaneId, passengersAmount, width, height);
        return resp.getData();
    }

    /**
     * Create a new board, default size is 27x16 with 20 passengers.
     * 
     * @param airplaneId  (required)
     * @param passengersAmount  (optional)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;BoardNewResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<BoardNewResponseDTO> getNewWithHttpInfo(UUID airplaneId, Integer passengersAmount, Integer width, Integer height) throws ApiException {
        com.squareup.okhttp.Call call = getNewValidateBeforeCall(airplaneId, passengersAmount, width, height, null, null);
        Type localVarReturnType = new TypeToken<BoardNewResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new board, default size is 27x16 with 20 passengers. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param passengersAmount  (optional)
     * @param width  (optional)
     * @param height  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call getNewAsync(UUID airplaneId, Integer passengersAmount, Integer width, Integer height, final ApiCallback<BoardNewResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNewValidateBeforeCall(airplaneId, passengersAmount, width, height, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoardNewResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /**
     * Build call for getScore
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call getScoreCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/{boardId}/score"
            .replaceAll("\\{" + "boardId" + "\\}", apiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScoreValidateBeforeCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling getScore(Async)");
        }
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getScore(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getScoreCall(airplaneId, boardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Get current score for the board.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @return BoardScoresDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public BoardScoresDTO getScore(UUID airplaneId, UUID boardId) throws ApiException {
        ApiResponse<BoardScoresDTO> resp = getScoreWithHttpInfo(airplaneId, boardId);
        return resp.getData();
    }

    /**
     * Get current score for the board.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @return ApiResponse&lt;BoardScoresDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<BoardScoresDTO> getScoreWithHttpInfo(UUID airplaneId, UUID boardId) throws ApiException {
        com.squareup.okhttp.Call call = getScoreValidateBeforeCall(airplaneId, boardId, null, null);
        Type localVarReturnType = new TypeToken<BoardScoresDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current score for the board. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call getScoreAsync(UUID airplaneId, UUID boardId, final ApiCallback<BoardScoresDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScoreValidateBeforeCall(airplaneId, boardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoardScoresDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /**
     * Build call for start
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call startCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/{boardId}/start"
            .replaceAll("\\{" + "boardId" + "\\}", apiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startValidateBeforeCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling start(Async)");
        }
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling start(Async)");
        }
        
        
        com.squareup.okhttp.Call call = startCall(airplaneId, boardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Start the game on the board.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public void start(UUID airplaneId, UUID boardId) throws ApiException {
        startWithHttpInfo(airplaneId, boardId);
    }

    /**
     * Start the game on the board.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<Void> startWithHttpInfo(UUID airplaneId, UUID boardId) throws ApiException {
        com.squareup.okhttp.Call call = startValidateBeforeCall(airplaneId, boardId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Start the game on the board. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call startAsync(UUID airplaneId, UUID boardId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startValidateBeforeCall(airplaneId, boardId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    
}
