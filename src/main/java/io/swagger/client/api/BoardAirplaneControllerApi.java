/*
 * Airplane Hackathon API
 * Airplane Hackathon API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;


import com.google.gson.reflect.TypeToken;

import java.io.IOException;




import io.swagger.client.model.BoardRegisterResponseDTO;
import io.swagger.client.model.CurrentPositionDTO;
import java.util.UUID;


import java.lang.reflect.Type;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



public class BoardAirplaneControllerApi {
    private ApiClient apiClient;

    public BoardAirplaneControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BoardAirplaneControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    
    /**
     * Build call for moveAirplane
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param direction  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call moveAirplaneCall(UUID airplaneId, UUID boardId, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/{boardId}/move/{direction}"
            .replaceAll("\\{" + "boardId" + "\\}", apiClient.escapeString(boardId.toString()))
            .replaceAll("\\{" + "direction" + "\\}", apiClient.escapeString(direction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveAirplaneValidateBeforeCall(UUID airplaneId, UUID boardId, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling moveAirplane(Async)");
        }
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling moveAirplane(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling moveAirplane(Async)");
        }
        
        
        com.squareup.okhttp.Call call = moveAirplaneCall(airplaneId, boardId, direction, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Move your Airplane. Requires &#x27;register&#x27; and &#x27;start&#x27; methods before.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param direction  (required)
     * @return CurrentPositionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public CurrentPositionDTO moveAirplane(UUID airplaneId, UUID boardId, String direction) throws ApiException {
        ApiResponse<CurrentPositionDTO> resp = moveAirplaneWithHttpInfo(airplaneId, boardId, direction);
        return resp.getData();
    }

    /**
     * Move your Airplane. Requires &#x27;register&#x27; and &#x27;start&#x27; methods before.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param direction  (required)
     * @return ApiResponse&lt;CurrentPositionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<CurrentPositionDTO> moveAirplaneWithHttpInfo(UUID airplaneId, UUID boardId, String direction) throws ApiException {
        com.squareup.okhttp.Call call = moveAirplaneValidateBeforeCall(airplaneId, boardId, direction, null, null);
        Type localVarReturnType = new TypeToken<CurrentPositionDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move your Airplane. Requires &#x27;register&#x27; and &#x27;start&#x27; methods before. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param direction  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call moveAirplaneAsync(UUID airplaneId, UUID boardId, String direction, final ApiCallback<CurrentPositionDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveAirplaneValidateBeforeCall(airplaneId, boardId, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrentPositionDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /**
     * Build call for register
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call registerCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/{boardId}/register"
            .replaceAll("\\{" + "boardId" + "\\}", apiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerValidateBeforeCall(UUID airplaneId, UUID boardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling register(Async)");
        }
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling register(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerCall(airplaneId, boardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Register your Airplane on the board to play a game. Returns Airplane&#x27;s start coordinates.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @return BoardRegisterResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public BoardRegisterResponseDTO register(UUID airplaneId, UUID boardId) throws ApiException {
        ApiResponse<BoardRegisterResponseDTO> resp = registerWithHttpInfo(airplaneId, boardId);
        return resp.getData();
    }

    /**
     * Register your Airplane on the board to play a game. Returns Airplane&#x27;s start coordinates.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @return ApiResponse&lt;BoardRegisterResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<BoardRegisterResponseDTO> registerWithHttpInfo(UUID airplaneId, UUID boardId) throws ApiException {
        com.squareup.okhttp.Call call = registerValidateBeforeCall(airplaneId, boardId, null, null);
        Type localVarReturnType = new TypeToken<BoardRegisterResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register your Airplane on the board to play a game. Returns Airplane&#x27;s start coordinates. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call registerAsync(UUID airplaneId, UUID boardId, final ApiCallback<BoardRegisterResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerValidateBeforeCall(airplaneId, boardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BoardRegisterResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /**
     * Build call for takePassenger
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param passengerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
        
     */
    public com.squareup.okhttp.Call takePassengerCall(UUID airplaneId, UUID boardId, UUID passengerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/board/{boardId}/take/{passengerId}"
            .replaceAll("\\{" + "boardId" + "\\}", apiClient.escapeString(boardId.toString()))
            .replaceAll("\\{" + "passengerId" + "\\}", apiClient.escapeString(passengerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (airplaneId != null)
        localVarHeaderParams.put("airplaneId", apiClient.parameterToString(airplaneId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call takePassengerValidateBeforeCall(UUID airplaneId, UUID boardId, UUID passengerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        // verify the required parameter 'airplaneId' is set
        if (airplaneId == null) {
            throw new ApiException("Missing the required parameter 'airplaneId' when calling takePassenger(Async)");
        }
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling takePassenger(Async)");
        }
        
        // verify the required parameter 'passengerId' is set
        if (passengerId == null) {
            throw new ApiException("Missing the required parameter 'passengerId' when calling takePassenger(Async)");
        }
        
        
        com.squareup.okhttp.Call call = takePassengerCall(airplaneId, boardId, passengerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
        
        
    }

    /**
     * Take the pasenger. You have to take the proper passenger from the proper place.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param passengerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public void takePassenger(UUID airplaneId, UUID boardId, UUID passengerId) throws ApiException {
        takePassengerWithHttpInfo(airplaneId, boardId, passengerId);
    }

    /**
     * Take the pasenger. You have to take the proper passenger from the proper place.
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param passengerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
        
     */
    public ApiResponse<Void> takePassengerWithHttpInfo(UUID airplaneId, UUID boardId, UUID passengerId) throws ApiException {
        com.squareup.okhttp.Call call = takePassengerValidateBeforeCall(airplaneId, boardId, passengerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Take the pasenger. You have to take the proper passenger from the proper place. (asynchronously)
     * 
     * @param airplaneId  (required)
     * @param boardId  (required)
     * @param passengerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
        
     */
    public com.squareup.okhttp.Call takePassengerAsync(UUID airplaneId, UUID boardId, UUID passengerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = takePassengerValidateBeforeCall(airplaneId, boardId, passengerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    
}
